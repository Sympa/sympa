<!-- $Id: javascript.tt2 6228 2009-09-23 08:56:52Z david.verdin $ -->

[% IF use_htmlarea %]
<script type="text/javascript">
  _editor_url = "[% htmlarea_url %]/";
  _editor_lang = "en";
</script>

<script type="text/javascript" src="[% htmlarea_url %]/htmlarea.js"></script>
[% END %]

<script type="text/javascript">
function showhide(div){
    oDiv = document.getElementById(div);
    if(oDiv.style.display == "none"){
        oDiv.style.display = "block";
    }else{
        oDiv.style.display = "none";
    }
}
</script>

<script type="text/javascript">
function show(div){
    oDiv = document.getElementById(div);
    oDiv.style.display = "block";
}
</script>

<script type="text/javascript">
function hide(div){
    oDiv = document.getElementById(div);
    oDiv.style.display = "none";
}

function hideError()
{
  document.getElementById('ErrorBlock').style.display = 'none';
  document.getElementById('ErrorMsg').style.display = 'none';
}

</script>

<script type="text/javascript">
<!-- for other browsers

// To confirm archives deletion
 function dbl_confirm(my_form, my_message,my_message2) {
     
      if (confirm(my_message)) 
      {
    	 if (confirm(my_message2)) 
	 {
	     my_form.zip.value = "1";
	 }
	 }else{
	return false;[% list %]
	}
  }	

  // To confirm a form submition
  function request_confirm(my_message) {
    if (confirm(my_message)) {
      return true;
    }else {
      return false;
    } 
}

  // To confirm on a link (A HREF)
  function request_confirm_link(my_url, my_message) {
    question = confirm(my_message);
    if (question !="0") {
         top.location = my_url;
    }
  }

[% IF false %]
  // To ask topic selection
  var topic_names = new Array();
  var topic_titles = new Array();	
  function checkbox_selection(my_url, my_message, boxnames, boxtitles) {
    var maxname = boxnames.length;	
    var maxtitle = boxtitles.length;	

    if (maxname != maxtitle) {
	return false;
    }	
    
    msg=window.open("","","width=300,height=300,toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=yes,copyhistory=no");
    msg.document.write('<HTML><BODY>'+'<CENTER><h3>'+my_message+'</h3></CENTER>');
    msg.document.write('<form action='+my_url+' method="post">');
    msg.document.write('<input type="hidden" name="list" value="[% list %]"/>');
    msg.document.write('<input type="hidden" name="action" value="review"/>');

    for (var i=0;i<maxname ;i++ ){	
	var bname = 'topic_'+boxnames[i];
	msg.document.write('<input type="checkbox" name='+bname+' value="1">'+boxtitles[i]);
	msg.document.write('<br />');	
    }
    msg.document.write('<input type="checkbox" name="other" value="1" />[%|loc%]Other[%END%]');	
    msg.document.write('<br /><br /><br />');
    msg.document.write('<input type="button" value="OK" onClick ="self.close()">');this.form.submit()	
    msg.document.write('</form>');	
    msg.document.write('</BODY></HTML>');
	
    return true;
    //return msg.document.form;

  }
[% END %]





  // To confirm on a link (A HREF)
  function refresh_mom_and_die() {
    url = window.opener.location.href;

    if (url.indexOf('logout') > -1 ) {
      url = '[% path_cgi %]/';
    }

    window.opener.location = url;
    self.close();
  }

[% IF cookie_set %]
  function GetCookie (name) {
     var arg = name + "=";
     var alen = arg.length;
     var clen = document.cookie.length;
     var i = 0;
     while (i < clen) {
       var j = i + alen;
       if (document.cookie.substring(i, j) == arg) 
         return getCookieVal (j);
         i = document.cookie.indexOf(" ", i) + 1;
         if (i == 0) break; 
       }
     return null;
  }  

  function getCookieVal (offset) {
    var endstr = document.cookie.indexOf (";", offset);
    if (endstr == -1)
      endstr = document.cookie.length;
    return unescape(document.cookie.substring(offset, endstr));
  }
[% END %]

  function toggle_selection(myfield) {
    if (!myfield.length) {
       if (myfield.checked) {
            myfield.checked = false;
       }else {
	    myfield.checked = true;
       }
    }else if (myfield.length){
      for (i = 0; i < myfield.length; i++) {
         if (myfield[i].checked) {
              myfield[i].checked = false;
         }else {
  	    myfield[i].checked = true;
         }
      }
    }
  }

[% IF (action == 'skinsedit') %]
 function chooseColorNumber(cn) {
    var select = document.getElementById('custom_color_number');

    if(select) for(var i=0; i<select.options.length; i++) if(select.options[i].value == cn) select.options.selectedIndex = i;
 }
[% END %]

[% IF (action == 'modindex' || action == 'request_topic') || (action == 'viewmod' || action == 'compose_mail')%] 

  // check if rejecting quietly spams

 function check_reject_spams(form,my_question,prevent_notify) {
    var checkbox_checked = false;

    if (prevent_notify.checked == "1") {
	return(true);
    }

    if (!form.elements.length) {
      if (form.elements.name == "idspam") { 
        var box = form.elements;
        if (box.checked == "1" ) {
 	 checkbox_checked = true;
        }
      }
    }else{
      for (i = 0; i < form.elements.length; i++) {
        if (form.elements[i].name == "idspam") { 
          var box = form.elements[i];
          if (box.checked == "1" ) {
            checkbox_checked = true;
            break;	
          }
        }
      }
    }
    if (checkbox_checked) {
	if (confirm(my_question)){	
          return(true);
	}else{
	  return(false);
        }	
    }
  }

  // To check at least one checkbox checked
  function checkbox_check_topic(form,string) {
 
    var checkbox_checked = false;
    var expr = /^topic_/;	
  
    for (i = 0; i < form.elements.length; i++) {
      if (form.elements[i].type == "checkbox") { 
        var box = form.elements[i];
        if (box.checked == "1" && expr.test(box.name)) {
 	 checkbox_checked = true;
       	 break;	
        }
      }
    }
    if (checkbox_checked) {
      return(true);	
    } else {
      alert("You must select a topic");
      return(false);
    }
  }

[% END %]

[% IF false %] 
 
  // No used function	
  // If the motif is found in the string, my_question is asked
  // if the answer == yes than action is d_unzip else d_upload 
  function requestBasedOnRegExp(my_question,my_form) {
    expr = /^.+\.zip$/i;

    found = expr.exec(document.getElementById("uploaded_file").value);

    if (found) {
      if (confirm(my_question)) {
        document.getElementById("javascript_action").value = "d_unzip";

      } else {
        document.getElementById("javascript_action").value = "d_upload";
      }
    }else {
      document.getElementById("javascript_action").value = "d_upload";
    }
    return true;
  }   
[% END %]

//launch a search by message Id
function searched_by_msgId(id) {
	var lgt_type_searched = document.log_form.type_searched.options.length;
	var length = document.log_form.target_type.options.length;
	document.log_form.target_type.options[length-2].selected = true;
	document.log_form.elements["target_searched"].value=id;
	document.log_form.type_searched.options[lgt_type_searched-1].selected = true;
	document.log_form.submit();
}

//reset all field in log form.
function clear_log_form() {
	var lgt_target_type = document.log_form.target_type.options.length;
	var lgt_type_searched = document.log_form.type_searched.options.length;
	document.log_form.target_type.options[lgt_target_type-3].selected = true;
	document.log_form.elements["target_searched"].value='';
	document.log_form.elements["date_from"].value='';
	document.log_form.elements["date_to"].value='';
	document.log_form.type_searched.options[lgt_type_searched-10].selected = true;
	var lgt_list_searched = document.log_form.list_searched.options.length;
	document.log_form.list_searched.options[lgt_list_searched-11].selected = true;
	document.log_form.elements["ip_searched"].value='';
}

//set a form field value to empty string. It uses the value of the field whose id is given
// as argument as a control to perform this operation or not.
function empty_field(target_field, control_field) {
	if (document.getElementById(control_field).value == 'false'){
		document.getElementById(control_field).value = 'true';
		document.getElementById(target_field).value = '';
	}
}

//to hide menu

function afficheId(baliseId,baliseId2)
  {
  if (document.getElementById && document.getElementById(baliseId) != null)
    {
    document.getElementById(baliseId).style.visibility='visible';
    document.getElementById(baliseId).style.display='block';
    }
  if (document.getElementById(baliseId2) != null)
    {
    document.getElementById(baliseId2).style.margin='0 0 0 25%';
    }
  }

function cacheId(baliseId,baliseId2)
  {
  if (document.getElementById && document.getElementById(baliseId) != null)
    {
    document.getElementById(baliseId).style.visibility='hidden';
    document.getElementById(baliseId).style.display='none';
    }
  if (document.getElementById(baliseId2) != null)
    {
    document.getElementById(baliseId2).style.margin='0 0 0 0';
    }
  
  }

cacheId('contenu','Stretcher');
// if JavaScript is available, hide the content on the page load.
// Without JavaScript, content will be display.


[% IF action=='skinsedit' %]

// A few configuration settings
var CROSSHAIRS_LOCATION = '[% icons_url %]/crosshairs.png';
var HUE_SLIDER_LOCATION = '[% icons_url %]/h.png';
var HUE_SLIDER_ARROWS_LOCATION = '[% icons_url %]/position.png';
var SAT_VAL_SQUARE_LOCATION = '[% icons_url %]/sv.png';

// Here are some boring utility functions. The real code comes later.

function hexToRgb(hex_string, default_)
{
    if (default_ == undefined)
    {
        default_ = null;
    }

    if (hex_string.substr(0, 1) == '#')
    {
        hex_string = hex_string.substr(1);
    }
    
    var r;
    var g;
    var b;
    if (hex_string.length == 3)
    {
        r = hex_string.substr(0, 1);
        r += r;
        g = hex_string.substr(1, 1);
        g += g;
        b = hex_string.substr(2, 1);
        b += b;
    }
    else if (hex_string.length == 6)
    {
        r = hex_string.substr(0, 2);
        g = hex_string.substr(2, 2);
        b = hex_string.substr(4, 2);
    }
    else
    {
        return default_;
    }
    
    r = parseInt(r, 16);
    g = parseInt(g, 16);
    b = parseInt(b, 16);
    if (isNaN(r) || isNaN(g) || isNaN(b))
    {
        return default_;
    }
    else
    {
        return {r: r / 255, g: g / 255, b: b / 255};
    }
}

function rgbToHex(r, g, b, includeHash)
{
    r = Math.round(r * 255);
    g = Math.round(g * 255);
    b = Math.round(b * 255);
    if (includeHash == undefined)
    {
        includeHash = true;
    }
    
    r = r.toString(16);
    if (r.length == 1)
    {
        r = '0' + r;
    }
    g = g.toString(16);
    if (g.length == 1)
    {
        g = '0' + g;
    }
    b = b.toString(16);
    if (b.length == 1)
    {
        b = '0' + b;
    }
    return ((includeHash ? '#' : '') + r + g + b).toUpperCase();
}

var arVersion = navigator.appVersion.split("MSIE");
var version = parseFloat(arVersion[1]);

function fixPNG(myImage)
{
    if ((version >= 5.5) && (version < 7) && (document.body.filters)) 
    {
        var node = document.createElement('span');
        node.id = myImage.id;
        node.className = myImage.className;
        node.title = myImage.title;
        node.style.cssText = myImage.style.cssText;
        node.style.setAttribute('filter', "progid:DXImageTransform.Microsoft.AlphaImageLoader"
                                        + "(src=\'" + myImage.src + "\', sizingMethod='scale')");
        node.style.fontSize = '0';
        node.style.width = myImage.width.toString() + 'px';
        node.style.height = myImage.height.toString() + 'px';
        node.style.display = 'inline-block';
        return node;
    }
    else
    {
        return myImage.cloneNode(false);
    }
}

function trackDrag(node, handler)
{
    function fixCoords(x, y)
    {
        var nodePageCoords = pageCoords(node);
        x = (x - nodePageCoords.x) + document.documentElement.scrollLeft;
        y = (y - nodePageCoords.y) + document.documentElement.scrollTop;
        if (x < 0) x = 0;
        if (y < 0) y = 0;
        if (x > node.offsetWidth - 1) x = node.offsetWidth - 1;
        if (y > node.offsetHeight - 1) y = node.offsetHeight - 1;
        return {x: x, y: y};
    }
    function mouseDown(ev)
    {
        var coords = fixCoords(ev.clientX, ev.clientY);
        var lastX = coords.x;
        var lastY = coords.y;
        handler(coords.x, coords.y);

        function moveHandler(ev)
        {
            var coords = fixCoords(ev.clientX, ev.clientY);
            if (coords.x != lastX || coords.y != lastY)
            {
                lastX = coords.x;
                lastY = coords.y;
                handler(coords.x, coords.y);
            }
        }
        function upHandler(ev)
        {
            myRemoveEventListener(document, 'mouseup', upHandler);
            myRemoveEventListener(document, 'mousemove', moveHandler);
            myAddEventListener(node, 'mousedown', mouseDown);
        }
        myAddEventListener(document, 'mouseup', upHandler);
        myAddEventListener(document, 'mousemove', moveHandler);
        myRemoveEventListener(node, 'mousedown', mouseDown);
        if (ev.preventDefault) ev.preventDefault();
    }
    myAddEventListener(node, 'mousedown', mouseDown);
    node.onmousedown = function(e) { return false; };
    node.onselectstart = function(e) { return false; };
    node.ondragstart = function(e) { return false; };
}

var eventListeners = [];

function findEventListener(node, event, handler)
{
    var i;
    for (i in eventListeners)
    {
        if (eventListeners[i].node == node && eventListeners[i].event == event
         && eventListeners[i].handler == handler)
        {
            return i;
        }
    }
    return null;
}
function myAddEventListener(node, event, handler)
{
    if (findEventListener(node, event, handler) != null)
    {
        return;
    }

    if (!node.addEventListener)
    {
        node.attachEvent('on' + event, handler);
    }
    else
    {
        node.addEventListener(event, handler, false);
    }

    eventListeners.push({node: node, event: event, handler: handler});
}

function removeEventListenerIndex(index)
{
    var eventListener = eventListeners[index];
    delete eventListeners[index];
    
    if (!eventListener.node.removeEventListener)
    {
        eventListener.node.detachEvent('on' + eventListener.event,
                                       eventListener.handler);
    }
    else
    {
        eventListener.node.removeEventListener(eventListener.event,
                                               eventListener.handler, false);
    }
}

function myRemoveEventListener(node, event, handler)
{
    removeEventListenerIndex(findEventListener(node, event, handler));
}

function cleanupEventListeners()
{
    var i;
    for (i = eventListeners.length; i > 0; i--)
    {
        if (eventListeners[i] != undefined)
        {
            removeEventListenerIndex(i);
        }
    }
}
myAddEventListener(window, 'unload', cleanupEventListeners);

// This copyright statement applies to the following two functions,
// which are taken from MochiKit.
//
// Copyright 2005 Bob Ippolito <bob@redivi.com>
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject
// to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

function hsvToRgb(hue, saturation, value)
{
    var red;
    var green;
    var blue;
    if (value == 0.0)
    {
        red = 0;
        green = 0;
        blue = 0;
    }
    else
    {
        var i = Math.floor(hue * 6);
        var f = (hue * 6) - i;
        var p = value * (1 - saturation);
        var q = value * (1 - (saturation * f));
        var t = value * (1 - (saturation * (1 - f)));
        switch (i)
        {
            case 1: red = q; green = value; blue = p; break;
            case 2: red = p; green = value; blue = t; break;
            case 3: red = p; green = q; blue = value; break;
            case 4: red = t; green = p; blue = value; break;
            case 5: red = value; green = p; blue = q; break;
            case 6: // fall through
            case 0: red = value; green = t; blue = p; break;
        }
    }
    return {r: red, g: green, b: blue};
}

function rgbToHsv(red, green, blue)
{
    var max = Math.max(Math.max(red, green), blue);
    var min = Math.min(Math.min(red, green), blue);
    var hue;
    var saturation;
    var value = max;
    if (min == max)
    {
        hue = 0;
        saturation = 0;
    }
    else
    {
        var delta = (max - min);
        saturation = delta / max;
        if (red == max)
        {
            hue = (green - blue) / delta;
        }
        else if (green == max)
        {
            hue = 2 + ((blue - red) / delta);
        }
        else
        {
            hue = 4 + ((red - green) / delta);
        }
        hue /= 6;
        if (hue < 0)
        {
            hue += 1;
        }
        if (hue > 1)
        {
            hue -= 1;
        }
    }
    return {
        h: hue,
        s: saturation,
        v: value
    };
}

function pageCoords(node)
{
    var x = node.offsetLeft;
    var y = node.offsetTop;
    var parent = node.offsetParent;
    while (parent != null)
    {
        x += parent.offsetLeft;
        y += parent.offsetTop;
        parent = parent.offsetParent;
    }
    return {x: x, y: y};
}

// The real code begins here.
var huePositionImg = document.createElement('img');
huePositionImg.galleryImg = false;
huePositionImg.width = 35;
huePositionImg.height = 11;
huePositionImg.src = HUE_SLIDER_ARROWS_LOCATION;
huePositionImg.style.position = 'absolute';

var hueSelectorImg = document.createElement('img');
hueSelectorImg.galleryImg = false;
hueSelectorImg.width = 35;
hueSelectorImg.height = 200;
hueSelectorImg.src = HUE_SLIDER_LOCATION;
hueSelectorImg.style.display = 'block';

var satValImg = document.createElement('img');
satValImg.galleryImg = false;
satValImg.width = 200;
satValImg.height = 200;
satValImg.src = SAT_VAL_SQUARE_LOCATION;
satValImg.style.display = 'block';

var crossHairsImg = document.createElement('img');
crossHairsImg.galleryImg = false;
crossHairsImg.width = 21;
crossHairsImg.height = 21;
crossHairsImg.src = CROSSHAIRS_LOCATION;
crossHairsImg.style.position = 'absolute';

function makeColorSelector(inputBox)
{
    var rgb, hsv
    
    function colorChanged()
    {
        var hex = rgbToHex(rgb.r, rgb.g, rgb.b);
        var hueRgb = hsvToRgb(hsv.h, 1, 1);
        var hueHex = rgbToHex(hueRgb.r, hueRgb.g, hueRgb.b);
        previewDiv.style.background = hex;
        inputBox.value = hex;
        satValDiv.style.background = hueHex;
        crossHairs.style.left = ((hsv.v*199)-10).toString() + 'px';
        crossHairs.style.top = (((1-hsv.s)*199)-10).toString() + 'px';
        huePos.style.top = ((hsv.h*199)-5).toString() + 'px';
    }
    function rgbChanged()
    {
        hsv = rgbToHsv(rgb.r, rgb.g, rgb.b);
        colorChanged();
    }
    function hsvChanged()
    {
        rgb = hsvToRgb(hsv.h, hsv.s, hsv.v);
        colorChanged();
    }
    
    var colorSelectorDiv = document.createElement('div');
    colorSelectorDiv.style.padding = '15px';
    colorSelectorDiv.style.position = 'relative';
    colorSelectorDiv.style.height = '275px';
    colorSelectorDiv.style.width = '250px';
    
    var satValDiv = document.createElement('div');
    satValDiv.style.position = 'relative';
    satValDiv.style.width = '200px';
    satValDiv.style.height = '200px';
    var newSatValImg = fixPNG(satValImg);
    satValDiv.appendChild(newSatValImg);
    var crossHairs = crossHairsImg.cloneNode(false);
    satValDiv.appendChild(crossHairs);
    function satValDragged(x, y)
    {
        hsv.s = 1-(y/199);
        hsv.v = (x/199);
        hsvChanged();
    }
    trackDrag(satValDiv, satValDragged)
    colorSelectorDiv.appendChild(satValDiv);

    var hueDiv = document.createElement('div');
    hueDiv.style.position = 'absolute';
    hueDiv.style.left = '230px';
    hueDiv.style.top = '15px';
    hueDiv.style.width = '35px';
    hueDiv.style.height = '200px';
    var huePos = fixPNG(huePositionImg);
    hueDiv.appendChild(hueSelectorImg.cloneNode(false));
    hueDiv.appendChild(huePos);
    function hueDragged(x, y)
    {
        hsv.h = y/199;
        hsvChanged();
    }
    trackDrag(hueDiv, hueDragged);
    colorSelectorDiv.appendChild(hueDiv);
    
    var previewDiv = document.createElement('div');
    previewDiv.style.height = '50px'
    previewDiv.style.width = '50px';
    previewDiv.style.position = 'absolute';
    previewDiv.style.top = '225px';
    previewDiv.style.left = '15px';
    previewDiv.style.border = '1px solid black';
    colorSelectorDiv.appendChild(previewDiv);
    
    function inputBoxChanged()
    {
        rgb = hexToRgb(inputBox.value, {r: 0, g: 0, b: 0});
        rgbChanged();
    }
    myAddEventListener(inputBox, 'change', inputBoxChanged);
    inputBox.size = 8;
    inputBox.style.position = 'absolute';
    inputBox.style.right = '15px';
    inputBox.style.top = (225 + (25 - (inputBox.offsetHeight/2))).toString() + 'px';
    colorSelectorDiv.appendChild(inputBox);
    
    inputBoxChanged();
    
    return colorSelectorDiv;
}

function makeColorSelectors(ev)
{
    var inputNodes = document.getElementsByTagName('input');
    var i;
    for (i = 0; i < inputNodes.length; i++)
    {
        var node = inputNodes[i];
        if (node.className != 'color')
        {
            continue;
        }
        var parent = node.parentNode;
        var prevNode = node.previousSibling;
        var selector = makeColorSelector(node);
        parent.insertBefore(selector, (prevNode ? prevNode.nextSibling : null));
    }
}

myAddEventListener(window, 'load', makeColorSelectors);

[% END %]
// end browsers -->
</script>

<!-- end javascript.tt2 -->
